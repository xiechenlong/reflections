What happens when you initialize a repository? Why do you need to do it?
增加了一个 .git文件，用来记录文档的历史信息。

How is the staging area different from the working directory and the repository?
What value do you think it offers?
缓存区的存在可以让你一次提交多个文件，因为这些文件可能是属于同一逻辑改动。
@Jeffrey Middleton，你执行一项任务后，又因其它事情执行了另一项任务，
如果没有staging area 那你只能同时commit两项任务，而staging area
就可以让你分开commit.

How can you use the staging area to make sure you have one commit per logical
change?
git diff 即可查看现在所做的更改，这就可以判断是否是一次完整的逻辑改进，若是则提交。
若太少，则继续添加。但是太多，如何删除？难到还要多次复制？

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
当我有多种方案时，我就可以用分支的方式来改动程序，而不需要保存多个文件夹。

@Mike Wales, 主分支是稳定的版本，不会有bug。再建立一个开发分支，用于开发。
当你想增加一个功能或修复bug或试验某些功能时也新建一个分支，在这个分支上解决好问题，
再合并到主分支中去。
而且当你对当前这个功能或试验感到厌烦时，可以切换到其它分支。

How do the diagrams help you visualize the branch structure?
这其实就是一个有向图，每次提交都会指向上一次的的版本。图让你清楚地看到各个分支，
及两个版本是否是“道路连通的”。

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
根据最初共同版本历史来更改，加的补上，减的拿掉，现在还没考虑冲突的情况。
因为合并的过程中，其实不会改变父级关系，用图可以清楚地看到这点。

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
自动合并方便，快速，不会出错。但无法自己解决冲突，此时只能手动解决。





